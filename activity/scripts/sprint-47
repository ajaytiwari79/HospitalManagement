db.getCollection('dailyTimeBankEntries').updateMany({},{$set:{"publishedBalances":{}}});

//kpi configuration changes
db.applicableKPI.update({}, {$set: {
"kpiRepresentation" : "REPRESENT_PER_INTERVAL",
    "frequencyType" : "DAYS",
    "value" : 2,
    "interval" : "LAST"
}}, {multi:true});




db.counter.update(
    { },
    { $pull: { filterTypes: { $in: [ "TIME_INTERVAL" ] }} },
    { multi: true }
);


db.applicableKPI.update(
    { },
    { $pull: { $applicableFilter:{criteriaList: { $elemMatch: {type: "TIME_INTERVAL" } }} }},
    { multi: true }
)

// Queries related to changes from UnitPosition to employment
db.costTimeAgreement.updateMany( {}, { $rename: { 'unitPositionId': 'employmentId'} } );

db.payOutPerShift.updateMany( {}, { $rename: { 'unitPositionId': 'employmentId'} } );

db.shifts.updateMany( {}, { $rename: { 'unitPositionId': 'employmentId'} } );

db.staffActivitySetting.updateMany( {}, { $rename: { 'unitPositionId': 'employmentId'} } );

db.dailyTimeBankEntries.updateMany( {}, { $rename: { 'unitPositionId': 'employmentId'} } );

db.staffWTACounter.updateMany( {}, { $rename: { 'unitPositionId': 'employmentId'} } );

db.workingTimeAgreement.updateMany( {}, { $rename: { 'unitPositionId': 'employmentId'} } );

db.payOutTransaction.updateMany( {}, { $rename: { 'unitPositionId': 'employmentId'} } )

db.shiftState.updateMany( {}, { $rename: { 'unitPositionId': 'employmentId'} } )

db.dailyTimeBankEntries.createIndex({ employmentId:1,date:1,deleted:1}, { unique: true });



## Query to update timeType in balanceSettingActivityTab

db.activities.find({}).forEach( function (activity) {
var timeTypeId = activity.balanceSettingsActivityTab.timeTypeId
if(timeTypeId){
print("_id "+timeTypeId);
var timeType = db.time_Type.findOne({"_id":timeTypeId});
activity.balanceSettingsActivityTab.timeType = timeType.secondLevelType;
db.activities.save(activity);
print("printing the results"+timeType.secondLevelType);
}

});