package com.kairos.shiftplanning.rules;
    dialect "java"
import com.kairos.shiftplanning.domain.*;
import com.kairos.shiftplanning.utils.ShiftPlanningUtility;
import java.util.ArrayList;
import org.optaplanner.core.api.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreHolder;
global HardMediumSoftLongScoreHolder scoreHolder;

//Impossible  constraints
rule "Assigned Start time"
salience 20
    when
        Shift(!locked &&  minutes ==0)
    then
        scoreHolder.addHardConstraintMatch(kcontext,  - 5);
end

/******WTA rules********/

rule "Minimum shift hours"
salience 20
    when
        Shift(!locked && !isCreatedByStaff() && getMinutes()<240)
    then
        scoreHolder.addHardConstraintMatch(kcontext,  - 5);
end

rule "Minimum shift hours if Created By Staff"
salience 20
    when
        Shift(!locked && isCreatedByStaff() && getMinutes()<60)
    then
        scoreHolder.addHardConstraintMatch(kcontext,  - 5);
end


rule "Maximum length of Shift"
salience 20
    when
         Shift(!locked && $minutes:minutes, $minutes>780)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,  - 5);
end


/*

rule "Max time between 2 shifts same day"
salience 15
    when
        $shifts:ArrayList() from collect (Shift())
        $shift:Shift(!locked && getTimeBetweenTwoShiftsInSameDay($shifts)>240)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,  - 1);
end



rule "Max working hours of this week"
salience 15
    when
        $shifts:ArrayList() from collect (Shift())
        $shift:Shift(!locked && getWorkingHoursOfWeek($shifts)>2880)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,  - 1);
end

rule "Maximum shift per Day"
salience 15
    when
        $shifts:ArrayList() from collect (Shift())
        $shift:Shift(!isCreatedByStaff() && getSameDayShiftCount($shifts)>2)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,  - 1);
end

rule "Maximum shift per Day if Created by staff"
salience 15
    when
        $shifts:ArrayList() from collect (Shift())
        $shift:Shift(isCreatedByStaff() && getSameDayShiftCount($shifts)>3)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,  - 1);
end

rule "Max consecutiveDays"
salience 15
    when
        $shifts:ArrayList() from collect (Shift())
        $shift:Shift(getConsecutiveDays($shifts)>5)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,  - 1);
end
*/
/**** Break Rules******
rule "Check for first break"
salience 20
    when
        $shift:Shift(!locked && $minutes:minutes &&  $minutes>=300 && minutes<600)
        $breaks:ArrayList() from collect (ShiftBreak(id.equals($shift.getId())))
        Shift(getBreaksDuration($breaks)!=30)
    then
        scoreHolder.addHardConstraintMatch(kcontext,  - 1);
end
rule "Check for second break"
salience 20
    when
        $shift:Shift(!locked && $minutes:minutes && $minutes>=600)
        $breaks:ArrayList() from collect (ShiftBreak(id.equals($shift.getId())))
        Shift(getBreaksDuration($breaks)!=60)
    then
        scoreHolder.addHardConstraintMatch(kcontext,  - 1);
end

rule "Check for Valid breaks"
salience 20
    when
        $shift:Shift(!locked)
        $shiftBreak:ShiftBreak(!isBreakValid($shift) )
    then
        scoreHolder.addHardConstraintMatch(kcontext,  - 1);
end
*/
/*
rule "Staffing Level Limits"
salience 20
    when
        $shifts:ArrayList()
        from collect (Shift())
        //$staffingLevel:StaffingLevel()
        $staffingLevel:StaffingLevel(getStaffingLevelSatisfaction($shifts)>0)
        //$satisfactionNumber:$staffingLevel.getStaffingLevelSatisfaction($shifts)
        //$satisfactionNumber:ShiftPlanningUtility.getStaffingLevelSatisfaction($staffingLevel,$shifts)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,  -$staffingLevel.getStaffingLevelSatisfaction($shifts));
end
*/

rule "Staffing Level Limits"
salience 20
    when
        $shift:Shift()
        $staffingLevel:StaffingLevel(getStaffingLevelSatisfaction($shift)>0)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,  -$staffingLevel.getStaffingLevelSatisfaction($shift));
end

/*
rule "Create break"
salience 20
    when
        $shift:Shift(getWorkMinutes()>=300)
    then
        ShiftBreak brk= new ShiftBreak(10l,ShiftPlanningUtility.getBreakIntervalFromShift($shift.getInterval(),240,30));
        Object factHandle=insertLogical(brk);
        $shift.addBreak(brk);
        ShiftPlanningUtility.registerFactHandle(factHandle,$shift);
end
*/
/*************IN-direct activities********/
rule "In-direct activitites within shift"
salience 20
    when
        $employee:Employee()
        $indirectActivities:IndirectActivity(hasEmployee($employee))
        $shift:Shift(!locked && employee.equals($employee) && !containsActivity($indirectActivities))
    then
        scoreHolder.addHardConstraintMatch(kcontext,  -1);
end


