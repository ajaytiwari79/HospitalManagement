
buildscript {
    ext {
	    springBootVersion='2.0.0.RELEASE'
        swaggerVersion = '2.5.0'
        jacksonVersion = '2.9.2'
        projectVersion = "0.0.1"
        version = "0.0.1"
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/release/"}
        maven { url "https://plugins.gradle.org/m2/"}
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

    }

}
plugins {
    id 'jacoco'
    id 'idea'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
apply plugin: 'application'



version = "$projectVersion-SNAPSHOT"
sourceCompatibility = 1.8
mainClassName = 'com.kairos.UserServiceApplication'
applicationDefaultJvmArgs = ["-Xdiag","-Xms1024m", "-Xmx1048m"]


repositories {
    mavenCentral()
    jcenter()
    maven { url "http://repo.spring.io/release/" }
    maven { url "https://plugins.gradle.org/m2/" }
}
task wrapper(type: Wrapper) { gradleVersion = '6.3' }


ext {
    springCloudVersion = 'Finchley.RELEASE'
}

dependencies {
    compile project(':kcommons')
    compile project(':kpermissions')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-security')

    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('org.springframework.cloud:spring-cloud-starter-oauth2')
    compile('org.springframework.cloud:spring-cloud-starter-security')
    compile group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.0.9.RELEASE'

    compile('org.springframework.boot:spring-boot-starter-data-neo4j')
    compile('org.springframework.boot:spring-boot-starter-websocket')

    compile group: 'org.springframework.ws', name: 'spring-ws-core', version: '3.0.0.RELEASE'

    compile 'com.google.api-client:google-api-client:1.22.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.22.0'
    compile 'com.google.apis:google-api-services-calendar:v3-rev239-1.22.0'

    compile group: 'com.twilio.sdk', name: 'twilio-java-sdk', version: '6.3.0'
//    compile('org.springframework.data:spring-data-redis:2.0.3.RELEASE')
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.0.0.RELEASE'
    compile('redis.clients:jedis:2.9.0')

    compile group: 'org.apache.poi', name: 'poi', version: '3.10-FINAL'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.10-FINAL'

    compile "io.springfox:springfox-swagger2:${swaggerVersion}"
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: swaggerVersion


    compile group: 'com.lowagie', name: 'itext', version: '4.2.1'



    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    //compile('org.springframework.boot:spring-boot-starter-webflux')
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.21.0'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jdbc
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: "${springBootVersion}"
    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '1.7.5'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/customJacocoReportDir")
}



jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}


/*configurations { c ->
    println 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC $c'+configurations.compile.collect { it.getName() }.join(' ')
}*/
//Just for windows
/*task pathingJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'pathing'

    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtime.files.collect {
                it.toURL().toString().replaceFirst(/file:\/+/, '/')
            }.join(' ')
        }
    }
}*/

/*
bootRun {
    dependsOn pathingJar
    doFirst {
        println 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'+ pathingJar.archivePath

        classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", pathingJar.archivePath)
    }
}*/

sonarqube {
    properties {
        property "sonar.projectName", "user"
        property "sonar.projectKey", "kairos:user"
        property "sonar.sources", "src/main"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.jacoco.reportPaths" , "build/jacoco/test.exe"
    }
}