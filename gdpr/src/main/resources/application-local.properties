spring.application.name=gdpr-service
#logging setting
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.org.springframework.web=INFO
logging.level.com.kairos=INFO
logging.file=/opt/kairos/micro-service-log/gdpr-service/gdpr.log

# Logging pattern for the console
logging.pattern.console=%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n

# Logging pattern for file
logging.pattern.file=%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n

#management setting
security.basic.enable= false
management.security.enabled= false
security.ignored=/**
management.security.flag=false
management.context-path=/kairos/gdpr/actuator

#eureka setting

eureka.instance.prefer-ip-address=false
eureka.client.register-with-eureka=false
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.enabled=false
ribbon.eureka.enabled= false

# load ribbon on startup
ribbon.egar-load.enabled=false
logging.level.org.springframework.data.mongodb.core.MongoTemplate=DEBUG
logging.level.org.springframework.data.mongodb.repository.Query=DEBUG

gateway.userservice.url=http://localhost:8091/kairos/user/api/v1/


## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://localhost:5432/gdpr
spring.datasource.username=postgres
spring.datasource.password=postgres@1234


# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
spring.cloud.refresh.refreshable=none
spring.jpa.show-sql=true

server.host.http.url=http://localdev.kairosplanning.com
kpermissions.data.publish=false
kpermissions.model.package.path=com.kairos.persistence