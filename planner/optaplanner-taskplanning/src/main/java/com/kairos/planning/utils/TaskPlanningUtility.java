package com.kairos.planning.utils;

import com.kairos.planning.domain.AvailabilityRequest;
import com.kairos.planning.domain.Employee;
import com.kairos.planning.domain.Task;
import com.kairos.planning.solution.TaskPlanningSolution;
import org.drools.core.base.DefaultKnowledgeHelper;
import org.drools.core.common.InternalFactHandle;
import org.drools.core.impl.KnowledgeBaseImpl;
import org.drools.core.impl.StatefulKnowledgeSessionImpl;
import org.joda.time.DateTime;
import org.joda.time.Interval;
import org.kie.api.runtime.ObjectFilter;
import org.optaplanner.core.impl.score.director.ScoreDirector;
import org.optaplanner.core.impl.score.director.drools.DroolsScoreDirector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class TaskPlanningUtility {
    public static long TASK_ID_SEQUENCE=2000000000l;
    private static Logger log= LoggerFactory.getLogger(TaskPlanningUtility.class);
    public static List<AvailabilityRequest> updatedList = new ArrayList<>();

    @Deprecated
    public static Task createBreak(Employee employee){
        int BREAK1_DURATION=30,BREAK1_SLA=10;

        Task currentTask= employee.getNextTask();
        Task lastTaskOfChain=null;
        while(currentTask!=null){
            if(currentTask.getNextTask()==null){
                lastTaskOfChain=currentTask;
            }
            currentTask=currentTask.getNextTask();
        }
        Task breakTask= new Task();
        breakTask.setInitialStartTime1(lastTaskOfChain.getPlannedEndTime());
        breakTask.setInitialEndTime1(lastTaskOfChain.getPlannedEndTime().plusMinutes(BREAK1_DURATION));
        breakTask.setDuration(BREAK1_DURATION);
        breakTask.setSlaDurationStart1(BREAK1_SLA);
        breakTask.setSlaDurationEnd1(BREAK1_SLA);
        //breakTask.setId(TASK_ID_SEQUENCE++);
        //breakTask.setPreviousTaskOrEmployee(lastTaskOfChain);
        breakTask.setLocation(lastTaskOfChain.getLocation());
       // breakTask.setEmployee(employee);
        breakTask.setTaskType(lastTaskOfChain.getTaskType());
        breakTask.setLocked(true);
        //lastTaskOfChain.setNextTask(breakTask);
        return breakTask;
    }
    /*public static void updateTaskVariables(Task task){
        scoreDirector.beforeVariableChanged(task,"plannedStartTime");
        task.setPlannedStartTime(plannedStartTime);
        scoreDirector.afterVariableChanged(task,"plannedStartTime");
    }*/
    @Deprecated
    public static void check(Object onj,InternalFactHandle factHandle){
        Task task= (Task)factHandle.getObject();
        //factHandle.getDataSource().
        Iterator iter = factHandle.getEntryPoint(null).getInternalWorkingMemory().getObjectStore().iterateObjects( new ObjectFilter() {
            public boolean accept(Object object) {
                    if ( object instanceof Task ) {
                        return ((Task) object).isLocked();
                    }
                    return false;
            }
        });
       iter.forEachRemaining(tsk->{
	   });
       

    }
    @Deprecated
    public static void checkA(Object onj,InternalFactHandle factHandle){
        //factHandle.getDataSource().
        Iterator iter = factHandle.getEntryPoint(null).getInternalWorkingMemory().getObjectStore().iterateObjects( new ObjectFilter() {
            public boolean accept(Object object) {
                    if ( object instanceof AvailabilityRequest ) {
                        return ((AvailabilityRequest) object).isAutogenerated();
                    }
                    return false;
            }
        });
       iter.forEachRemaining(tsk->{
    	   tsk=tsk;
       });
    }
    public static void checker(Object... objs) throws Exception {
    	int i =0;
    	i++;
		/*
		Interval interval =(Interval) objs[2];
		Employee employee= (Employee)objs[1];*/
        DefaultKnowledgeHelper helper=(DefaultKnowledgeHelper ) objs[0];
		List<AvailabilityRequest> requests= new ArrayList<>();
		/*for (Object object : helper.getWorkingMemory().getObjects()) {
			if ( object instanceof AvailabilityRequest && ((AvailabilityRequest)object).getEmployee().getId().equals(employee.getId())
					&& ((AvailabilityRequest) object).containsInterval(interval)) {
				requests.add((AvailabilityRequest)object);
			}
		}*/
		if(requests.size()>0){
            log.info("size:{}",requests.size());
		    //throw  new Exception();
        }

    }

    public static AvailabilityRequest getEmployeeAvailabilityForDay(Employee employee,ScoreDirector<TaskPlanningSolution> director){
    	AvailabilityRequest req=null;
    	for (AvailabilityRequest availabilityRequest : director.getWorkingSolution().getAvailabilityList()) {
			if(availabilityRequest.getEmployee().getId().equals(employee.getId())){
				req=availabilityRequest;
				break;
			}
		}
    	return req;
    }

    public static DateTime getEarliestStartTimeForFirstTask( Task task,AvailabilityRequest shift) {
		List<DateTime> earlyStartTimes= new ArrayList<>();
        Integer drivingTime=task.getDrivingMinutesFromPreviousTaskOrEmployee();
		task.getTimeWindows().forEach(window->{
			Interval interval = window.getInterval();
			DateTime earliestStart=null;
			if(shift==null){
				earliestStart=interval.getStart();
				earlyStartTimes.add(earliestStart);
				return;
			}else if(shift.overlaps(interval)){
				DateTime overlapStart=shift.getInterval().overlap(interval).getStart();
				 earliestStart=(earliestStart=shift.getInterval().getStart().plusMinutes(drivingTime)).isAfter(overlapStart)?
						 earliestStart:overlapStart;
				 earlyStartTimes.add(earliestStart);
			}
			
		});
		Collections.sort(earlyStartTimes);
		return earlyStartTimes.isEmpty()?task.getTimeWindows().get(0).getStart():earlyStartTimes.get(0);
		//log.info("First task {} planned on {}, planned fine:{}",task.getId(),plannedTime,task.isInPossibleInterval(plannedTime));
	}
    public static DateTime getEarliestStartTimeForChain(Task task) {
		List<DateTime> earlyStartTimes= new ArrayList<>();
		Task prevTask= (Task)task.getPreviousTaskOrEmployee();
		Integer drivingTime=task.getDrivingMinutesFromPreviousTaskOrEmployee();
		DateTime earliestPossibleStart=prevTask.getPlannedEndTime().plusMinutes(drivingTime);
		task.getTimeWindows().forEach(window->{
			Interval interval = window.getInterval();
			DateTime earliestStart=earliestPossibleStart.isAfter(interval.getStart())?earliestPossibleStart:interval.getStart();	
			earlyStartTimes.add(earliestStart);
		});
		Collections.sort(earlyStartTimes);
		return earlyStartTimes.isEmpty()?earliestPossibleStart:earlyStartTimes.get(0);
		//log.info("Chained task {} planned on {}, planned fine:{}",task.getId(),plannedTime,task.isInPossibleInterval(plannedTime));
	}
    public static boolean contains(List<Interval> intervals,Interval interval ){
    	boolean[] contains=new boolean[]{false};
    	intervals.forEach(inter->{
    		if(inter.contains(interval)){
    			contains[0]=true;
    			return;
    		}
    	});
    	return contains[0];
    }
}