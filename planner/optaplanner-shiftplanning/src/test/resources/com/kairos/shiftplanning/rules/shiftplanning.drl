package com.kairos.shiftplanning.rules;
    dialect "java"
import com.kairos.shiftplanning.domain.*;
import com.kairos.shiftplanning.utils.ShiftPlanningUtility;
import java.util.ArrayList;
import org.optaplanner.core.api.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreHolder;
global HardMediumSoftLongScoreHolder scoreHolder;

//Impossible  constraints
rule "Assigned Start time"
salience 20
    when
        ShiftRequestPhase(!locked &&  minutes ==0)
    then
        scoreHolder.addHardConstraintMatch(kcontext,  - 5);
end
/******WTA rules********/
rule "Minimum shift hours"
salience 20
    when
        ShiftRequestPhase(!locked && !isCreatedByStaff() && getMinutes()<240)
    then
        scoreHolder.addHardConstraintMatch(kcontext,  - 5);
end
rule "Minimum shift hours if Created By Staff"
salience 20
    when
        ShiftRequestPhase(!locked && isCreatedByStaff() && getMinutes()<60)
    then
        scoreHolder.addHardConstraintMatch(kcontext,  - 5);
end
rule "Maximum length of Shift"
salience 20
    when
        ShiftRequestPhase(!locked && $minutes:minutes && $minutes>600)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,  - 5);
end

rule "Staffing Level Limits"
salience 20
    when
        $shift:ShiftRequestPhase()
        $indirectActivityList:ArrayList() from collect (IndirectActivity(overlapsInterval($shift.getInterval())))
        $staffingLevel:StaffingLevel(date==$shift.getDate() && getStaffingLevelSatisfaction($shift,$indirectActivityList)>0)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,-$staffingLevel.getStaffingLevelSatisfaction($shift,$indirectActivityList));
end

rule "Staffing Level against recommendations"// && getStaffingLevelSatisfaction($shift,$indirectActivityList)>0
salience 20
    when
        $staffingLevel:StaffingLevel($date:date)
        $shifts:ArrayList() from collect (ShiftRequestPhase(!locked && date.equals($date)))
        $indirectActivityList:ArrayList() from collect (IndirectActivity(plannedStartDate!=null && plannedStartDate.equals($date)))
        $total: Integer(intValue>0) from ($staffingLevel.getStaffingLevelSatisfaction($shifts,$indirectActivityList))
    then
        scoreHolder.addMediumConstraintMatch(kcontext,-$total);
end


/*************IN-direct activities********/
rule "In-direct activities within shift"
salience 20
    when
        $employee:Employee()
        $indirectActivities:IndirectActivity(hasEmployee($employee))
        $shift:ShiftRequestPhase(!locked && employee.equals($employee) && !containsActivity($indirectActivities))
    then
        scoreHolder.addMediumConstraintMatch(kcontext,  -1);
end
/*************Absence activities********/
rule "Absence activitites"
salience 20
    when
        $employee:Employee()
        $absence:Absence(employee==$employee)
        $shift:ShiftRequestPhase(!locked && employee.equals($employee) && overlapsInterval($absence.getInterval()))
    then
        scoreHolder.addHardConstraintMatch(kcontext,  -1);
end

/**Avoid overlapping recommendations**/
/*rule "Avoid overlap"
salience 20
    when
        $employee:Employee()
        $shift:ShiftRequestPhase(!locked && employee.equals($employee))
        ShiftRequestPhase(!locked && employee.equals($employee) && overlapsInterval($shift.getInterval()))
    then
        scoreHolder.addSoftConstraintMatch(kcontext,  -1);
end
*/