package com.kairos.shiftplanning.rules;
    dialect "java"
import com.kairos.shiftplanning.domain.*;
import com.kairos.shiftplanning.utils.ShiftPlanningUtility;
import java.util.ArrayList;
import org.optaplanner.core.api.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreHolder;
global HardMediumSoftLongScoreHolder scoreHolder;


/******WTA rules********/

rule "Maximum Shift Length KP-764"
salience 20
    when
        $shift:ShiftRequestPhase(getInterval()!=null)
        $constraintsPenality: Integer(intValue>0) from ($shift.getEmployee().checkConstraints($shift,1))
    then
        $shift.getEmployee().breakLevelConstraints(scoreHolder,kcontext,1,$constraintsPenality);
end


rule "Minimum Shift Length KP-765"
salience 20
    when
        $shift:ShiftRequestPhase(getInterval()!=null)
        $constraintsPenality: Integer(intValue>0) from ($shift.getEmployee().checkConstraints($shift,2))
    then
        $shift.getEmployee().breakLevelConstraints(scoreHolder,kcontext,2,$constraintsPenality);
end

rule "Maximum Consecutive Working Days"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(isAbsenceActivityApplied() && getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,3))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,3,$constraintsPenality);
end

rule "Minimum Rest In Consecutive Days"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(isAbsenceActivityApplied() && getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,4))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,4,$constraintsPenality);
end

rule "Maximum Night Shift Length"
salience 20
    when
        $shift:ShiftRequestPhase(getInterval()!=null)
        $constraintsPenality: Integer(intValue>0) from ($shift.getEmployee().checkConstraints($shift,5))
    then
        $shift.getEmployee().breakLevelConstraints(scoreHolder,kcontext,5,$constraintsPenality);
end

/*
rule "Minimum Consecutive Nights"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,6))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,6,$constraintsPenality);
end
*/
rule "Maximum Consecutive Working Nights"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,7))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,7,$constraintsPenality);
end

rule "Minimum Rest Consecutive Nights"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,8))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,8,$constraintsPenality);
end

rule "Maximum Number Of Nights"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(!isAbsenceActivityApplied() &&  getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,9))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,9,$constraintsPenality);
end

rule "Minimum number of days off per period"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(isAbsenceActivityApplied() && getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,10))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,10,$constraintsPenality);
end



rule "Maximum Average Scheduled Time"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,11))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,11,$constraintsPenality);
end



rule "Number Of Weekend Shift In Period"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(!isAbsenceActivityApplied() && getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,13))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,13,$constraintsPenality);
end




rule "Minimum Daily Resting Time"
salience 20
    when
       $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(!isAbsenceActivityApplied() && getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,15))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,15,$constraintsPenality);
end



rule "Minimum Weekly Rest Period"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase(getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,17))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,17,$constraintsPenality);
end

rule "Shortest And Average Daily Rest"
salience 20
    when
        $emp:Employee()
         $shifts:ArrayList(size>0) from collect (ShiftRequestPhase( !isAbsenceActivityApplied() && getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,18))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,18,$constraintsPenality);
end

rule "Maximum Shifts In Interval"
salience 20
    when
        $emp:Employee()
        $shifts:ArrayList(size>0) from collect (ShiftRequestPhase( !isAbsenceActivityApplied() &&  getInterval()!=null && employee.equals($emp)))
        $constraintsPenality: Integer(intValue>0) from ($emp.checkConstraints($shifts,19))
    then
        $emp.breakLevelConstraints(scoreHolder,kcontext,19,$constraintsPenality);
end



/******WTA rules Ends****/
